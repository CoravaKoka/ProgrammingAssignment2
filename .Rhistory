makeCacheMatrix <- function(x = matrix()) {
im <- NULL                         ## assigning NULL to im
set <- function(y) {               ## defines a function set
x <<- y                          ## assigning y to x
im <<- NULL                      ## assigning NULL to im
}
get <- function() x
setInverse <- function(solve) im <<- solve           ## defines a function setInverse with argument solve, and pass argument solve to the im
getInverse <- function() im                          ## defines a function getInverse
list(set = set, get = get,                           ## return from the function makeCacheMatrix - list with four functions
setInverse = setInverse,
getInverse = getInverse)
}
# This function computes the inverse of the special "matrix" returned by makeCacheMatrix
# If the inverse has already been calculated (and the matrix has not changed), then cacheSolve
# should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
im <- x$getInverse()
if(!is.null(im)) {                            ## checking does im is NULL or not, and if im is not NULL value
message("getting cached data")              ## printing message
return(im)                                  ## return inverted matrix
}
data <- x$get()                               ## assigning data with matrix x
im <- solve(data, ...)                        ## calculate inverse matrix
x$setInverse(im)
im
}
matrix1 <- matrix(1:4, c(2,2))
matrix1
cachematrix1 <- makeCacheMatrix(matrix1)
cachematrix1$get()
cacheSolve(cachematrix1)
cacheSolve(cachematrix1)
matrix2 <- matrix(c(1, 0, 0, 2), c(2, 2))
matrix2
achematrix1$set(matrix2)
cachematrix1$set(matrix2)
cachematrix1$get()
cachematrix1$getinverse()
cacheSolve(cachematrix1)
m <- matrix(rnorm(25),5,5)
cache <- makeCacheMatrix(m)
cacheSolve(cache)
x <- matrix(1:4,2,2)
x1<-makeCacheMatrix(x);
x2<-cacheSolve(x1);
x2
x2 %*% x
x <- matrix(2:5,2,2)
x1<-makeCacheMatrix(x);
x2<-cacheSolve(x1);
x2
a <- makeCachematrix(matrix(nrow=2, ncol=2, c(2,3,4,5))
a$get()
cacheSolve(a)
a <- makeCachematrix(matrix(nrow=2, ncol=2, c(2,3,4,5)))
a <- makeCacheMatrix(matrix(nrow=2, ncol=2, c(2,3,4,5)))
a$get()
cacheSolve(a)
x <- matrix(2:5,2,2)
solve(x)
x1<-makeCacheMatrix(x);
x2<-cacheSolve(x1);
x2
x <- rbind(c(1, -1/4), c(-1/4,1))
x
solve(x)
x1 <- makeCacheMatrix(x)
x2 <- cacheSolve(x1)
x2
x2 %*% x
x <- matrix(c(1, 1, 1, 3, 4, 3, 3, 3, 4),3)
x
solve(x)
x1 <- makeCacheMatrix(x)
x2 <- cacheSolve(x1)
x2
x2 %*% x
x <- matrix (rnorm(100), 10, 10)
solve(x)
x1 <- makeCacheMatrix(x)
x2 <- cacheSolve(x1)
x2
x2 %*% x
x <- matrix(c(1, 5, 2, 3, 1, 8, 2, 7, 3),3)
solve(x)
x1 <- makeCacheMatrix(x)
x2 <- cacheSolve(x1)
x2
x2 %*% x
x <- matrix(c(1,2,3,6,0,4,7,8,9),3,3)
#x <- matrix (rnorm(100), 10, 10)
solve(x)
x1 <- makeCacheMatrix(x)
x2 <- cacheSolve(x1)
x2
x <- matrix(1:4, c(2,2))
x
x1 <- makeCacheMatrix(1)
x1$get()
x <- matrix(1:4, c(2,2))
x
x1 <- makeCacheMatrix(1)
x2 <- cacheSolve(x1)
x2 %*% X
solve(x)
x <- matrix(1:4, c(2,2))
x
x1 <- makeCacheMatrix(1)
x2 <- cacheSolve(x1)
x <- matrix(1:4, c(2,2))
x
x1 <- makeCacheMatrix(x)
x2 <- cacheSolve(x1)
x2 %*% X
x <- matrix(1:4, c(2,2))
x
x1 <- makeCacheMatrix(x)
x2 <- cacheSolve(x1)
x2
x %*% X2
x <- matrix(1:4, c(2,2))
x1 <- makeCacheMatrix(x)
x2 <- cacheSolve(x1)
x2
x %*% X2
x <- matrix(1:4, c(2,2))
x1 <- makeCacheMatrix(x)
x2 <- cacheSolve(x1)
x2
x %*% X2
solve(x)
x <- rbind(c(1, -1/4), c(-1/4,1))
x
solve(x)
x1 <- makeCacheMatrix(x)
x2 <- cacheSolve(x1)
x2
x2 %*% x
x <- matrix(c(1,2,3,6,0,4,7,8,9),3,3)
#x <- matrix (rnorm(100), 10, 10)
x <- matrix(c(1,2,3,6,0,4,7,8,9),3,3)
#x <- matrix (rnorm(100), 10, 10)
solve(x)
x1 <- makeCacheMatrix(x)
x2 <- cacheSolve(x1)
x2
x2 %*% x
x <- matrix(c(1, 5, 2, 3, 1, 8, 2, 7, 3),3)
x <- matrix(c(1,2,3,6,0,4,7,8,9),3,3)
x <- matrix(c(1, 5, 2, 3, 1, 8, 2, 7, 3),3)
#x <- matrix(c(1,2,3,6,0,4,7,8,9),3,3)
#x <- matrix (rnorm(100), 10, 10)
solve(x)
x1 <- makeCacheMatrix(x)
x2 <- cacheSolve(x1)
x2
x2 %*% x
x <- matrix (rnorm(100), 10, 10)
solve(x)
x1 <- makeCacheMatrix(x)
x2 <- cacheSolve(x1)
x2
x2 %*% x
a <- makeCacheMatrix(matrix(1:4,2))
a$get()
a$getInverse()
a$set(matrix(5:8,2))
a$get()
cacheSolve(a)
cacheSolve(a)
a$getInverse()
a <- makeCacheMatrix(matrix(1:4,2))
a$get()
a$getInverse()
cacheSolve(a)
a$getInverse()
a$set(matrix(5:8,2))
a$get()
cacheSolve(a)
cacheSolve(a)
a$getInverse()
a <- makeCacheMatrix(matrix(1:4,2))
a$get()
a$getInverse()
cacheSolve(a)
a$getInverse()
a$set(matrix(rnorm(100), 10, 10))
a$get()
cacheSolve(a)
cacheSolve(a)
a$getInverse()
b <- a$getInverse()
a %*% b
b <- a$getInverse()
a
a %*% b
x <- matrix (rnorm(100), 10, 10)
solve(x)
x1 <- makeCacheMatrix(x)
x2 <- cacheSolve(x1)
x2
x2 %*% x
a <- makeCacheMatrix(matrix(1:4,2))
a$get()
a$getInverse()
cacheSolve(a)
a$getInverse()
a$set(matrix(rnorm(100), 10, 10))
a$get()
cacheSolve(a)
cacheSolve(a)
a$getInverse()
a$set(matrix(c(1, 5, 2, 3, 1, 8, 2, 7, 3),3))
a$get()
cacheSolve(a)
cacheSolve(a)
a$getInverse()
x <- matrix(2:5,2,2)
solve(x)
x1<-makeCacheMatrix(x);
x2<-cacheSolve(x1);
x2
x2 %*% x
x <- matrix(1:4,2)
a <- makeCacheMatrix(x)
a$get()
a$getInverse()
cacheSolve(a)
cacheSolve(a)
a$getInverse()
b <- a$getInverse()
b %*% x
y <- matrix(rnorm(100), 10, 10)
a$set(y)
a$get()
cacheSolve(a)
cacheSolve(a)
a$getInverse()
b <- a$getInverse()
b %*% y
x <- matrix(1:4,2)
a <- makeCacheMatrix(x)
a$get()
a$getInverse()
cacheSolve(a)
cacheSolve(a)
a$getInverse()
b <- a$getInverse()
b %*% x
x <- matrix(rnorm(100), 10, 10)
a$set(x)
a$get()
cacheSolve(a)
cacheSolve(a)
a$getInverse()
b <- a$getInverse()
b %*% x
x <- matrix(c(1, 5, 2, 3, 1, 8, 2, 7, 3),3)
a$set(x)
a$get()
cacheSolve(a)
cacheSolve(a)
a$getInverse()
b <- a$getInverse()
b %*% x
